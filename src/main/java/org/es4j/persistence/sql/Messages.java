package org.es4j.persistence.sql;

//------------------------------------------------------------------------------
import org.es4j.util.CultureInfo;
import org.es4j.util.ResourceManager;

// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//using System;
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
//[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
//[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
//[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
public class Messages {

    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    //[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    private Messages() {
    }

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    private static ResourceManager getResourceManager() {
        if(true) throw new UnsupportedOperationException("Not yet implemented");
        if (resourceMan == null) {
            ResourceManager temp = null; // new ResourceManager("EventStore.Persistence.SqlPersistence.Messages", typeof(Messages).Assembly);
            resourceMan = temp;
        }
        return resourceMan;
    }

    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    private static CultureInfo getCulture() {
        return resourceCulture;
    }

    private static void setCulture(CultureInfo resourceCulture_) {
        resourceCulture = resourceCulture_;
    }

    /// <summary>
    ///   Looks up a localized string similar to Adding parameter named &apos;{0}&apos; to statement..
    /// </summary>
    public static String addingParameter() {
        return ResourceManager.getString("AddingParameter", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Adding snapshot to stream &apos;{0}&apos; at position {1}..
    /// </summary>
    public static String addingSnapshot() {
        return ResourceManager.getString("AddingSnapshot", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Attempt to use storage after it has been disposed..
    /// </summary>
    public static String alreadyDisposed() {

        return ResourceManager.getString("AlreadyDisposed", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Attempting to commit {0} events on stream &apos;{1}&apos; at sequence {2}..
    /// </summary>
    public static String attemptingToCommit() {

        return ResourceManager.getString("AttemptingToCommit", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to A connection could not be created for the specified named connection..
    /// </summary>
    public static String badConnectionName() {

        return ResourceManager.getString("BadConnectionName", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to The factory provided was unable to create an object to store..
    /// </summary>
    public static String badFactoryResult() {

        return ResourceManager.getString("BadFactoryResult", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Binding parameter &apos;{0}&apos; with value: {1}.
    /// </summary>
    public static String bindingParameter() {

        return ResourceManager.getString("BindingParameter", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Cleaning up root threaded scope.
    /// </summary>
    public static String cleaningRootThreadScope() {

        return ResourceManager.getString("CleaningRootThreadScope", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Command has client-controlled transaction: {0}..
    /// </summary>
    public static String clientControlledTransaction() {

        return ResourceManager.getString("ClientControlledTransaction", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Command executed, {0} rows affected..
    /// </summary>
    public static String commandExecuted() {

        return ResourceManager.getString("CommandExecuted", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Command text to be executed: {0}.
    /// </summary>
    public static String commandTextToExecute() {

        return ResourceManager.getString("CommandTextToExecute", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Non-query statement threw an exception of type &apos;{0}&apos;..
    /// </summary>
    public static String commandThrewException() {

        return ResourceManager.getString("CommandThrewException", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Commit &apos;{0}&apos; persisted successfully..
    /// </summary>
    public static String commitPersisted() {

        return ResourceManager.getString("CommitPersisted", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Concurrent write detected..
    /// </summary>
    public static String concurrentWriteDetected() {

        return ResourceManager.getString("ConcurrentWriteDetected", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Configuring connections: master &apos;{0}&apos;; replica &apos;{1}&apos;, shards: {2}..
    /// </summary>
    public static String configuringConnections() {
        return ResourceManager.getString("ConfiguringConnections", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Could not find connection name &apos;{0}&apos; in the configuration file..
    /// </summary>
    public static String connectionNotFound() {
        return ResourceManager.getString("ConnectionNotFound", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Creating command..
    /// </summary>
    public static String creatingCommand() {

        return ResourceManager.getString("CreatingCommand", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Deserializing commit from record using serializer of type &apos;{0}&apos;..
    /// </summary>
    public static String deserializingCommit() {

        return ResourceManager.getString("DeserializingCommit", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Deserializing snapshot from data record..
    /// </summary>
    public static String deserializingSnapshot() {
        return ResourceManager.getString("DeserializingSnapshot", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Discovered DB provider factory settings for &apos;{0}&apos;, using &apos;{1}&apos;..
    /// </summary>
    public static String discoveredConnectionProvider() {
        return ResourceManager.getString("DiscoveredConnectionProvider", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Discovering connection settings for &apos;{0}&apos;..
    /// </summary>
    public static String discoveringConnectionSettings() {
        return ResourceManager.getString("DiscoveringConnectionSettings", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Disposing underlying thread-scoped resource..
    /// </summary>
    public static String disposingRootThreadScopeResources() {
        return ResourceManager.getString("DisposingRootThreadScopeResources", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Disposing SQL statement resources, including any transactions and connections..
    /// </summary>
    public static String disposingStatement() {
        return ResourceManager.getString("DisposingStatement", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Disposing threaded scope; scope is root: {0}.
    /// </summary>
    public static String disposingThreadScope() {

        return ResourceManager.getString("DisposingThreadScope", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Duplicate commit detected; throwing..
    /// </summary>
    public static String duplicateCommit() {

        return ResourceManager.getString("DuplicateCommit", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Embedding sharding key into connection string for &apos;{0}&apos;..
    /// </summary>
    public static String embeddingShardKey() {

        return ResourceManager.getString("EmbeddingShardKey", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Enumerated {0} rows, re-querying for next page..
    /// </summary>
    public static String enumeratedRowCount() {

        return ResourceManager.getString("EnumeratedRowCount", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Enumeration of paged results threw exception of type &apos;{0}&apos;..
    /// </summary>
    public static String enumerationThrewException() {

        return ResourceManager.getString("EnumerationThrewException", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Executed statement threw an exception, but the exception was suppressed..
    /// </summary>
    public static String exceptionSuppressed() {

        return ResourceManager.getString("ExceptionSuppressed", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Executing command..
    /// </summary>
    public static String executingCommand() {

        return ResourceManager.getString("ExecutingCommand", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Executing query..
    /// </summary>
    public static String executingQuery() {

        return ResourceManager.getString("ExecutingQuery", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Getting all commits for stream &apos;{0}&apos; between revisions &apos;{1}&apos; and &apos;{2}&apos;..
    /// </summary>
    public static String gettingAllCommitsBetween() {

        return ResourceManager.getString("GettingAllCommitsBetween", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Getting all commits from &apos;{0}&apos; forward..
    /// </summary>
    public static String gettingAllCommitsFrom() {

        return ResourceManager.getString("GettingAllCommitsFrom", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Getting snapshot for stream &apos;{0}&apos; on or before revision {1}..
    /// </summary>
    public static String gettingRevision() {

        return ResourceManager.getString("GettingRevision", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Getting a list of streams to snapshot..
    /// </summary>
    public static String gettingStreamsToSnapshot() {

        return ResourceManager.getString("GettingStreamsToSnapshot", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Getting the list of all undispatched commits..
    /// </summary>
    public static String gettingUndispatchedCommits() {

        return ResourceManager.getString("GettingUndispatchedCommits", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Initializing storage engine..
    /// </summary>
    public static String initializingStorage() {

        return ResourceManager.getString("InitializingStorage", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Marking commit &apos;{0}&apos; as dispatched..
    /// </summary>
    public static String markingCommitAsDispatched() {

        return ResourceManager.getString("MarkingCommitAsDispatched", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Executing query with max page size of {0}..
    /// </summary>
    public static String maxPageSize() {

        return ResourceManager.getString("MaxPageSize", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Could not find the required attribute &apos;connection string&apos; on the connection name &apos;{0}&apos; in the configuration file..
    /// </summary>
    public static String missingConnectionString() {

        return ResourceManager.getString("MissingConnectionString", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Could not find the required attribute &apos;providerName&apos; on the connection name &apos;{0}&apos; in the configuration file..
    /// </summary>
    public static String missingProviderName() {

        return ResourceManager.getString("MissingProviderName", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to No connections have been opened yet..
    /// </summary>
    public static String notConnectionsAvailable() {

        return ResourceManager.getString("NotConnectionsAvailable", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to The object has been disposed and cannot be used..
    /// </summary>
    public static String objectAlreadyDisposed() {

        return ResourceManager.getString("ObjectAlreadyDisposed", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Unable to open connection &apos;{0}&apos;..
    /// </summary>
    public static String openFailed() {
        return ResourceManager.getString("OpenFailed", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized string similar to Opening connection &apos;{0}&apos;..
    /// </summary>
    public static String openingConnection() {

        return ResourceManager.getString("OpeningConnection", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Opening master connection &apos;{0}&apos;.
    /// </summary>
    public static String openingMasterConnection() {

        return ResourceManager.getString("OpeningMasterConnection", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Opening replica connection &apos;{0}&apos;..
    /// </summary>
    public static String openingReplicaConnection() {

        return ResourceManager.getString("OpeningReplicaConnection", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Opening new threaded scope for key &apos;{0}&apos;; scope is root: {1}.
    /// </summary>
    public static String openingThreadScope() {

        return ResourceManager.getString("OpeningThreadScope", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Purging all stored data..
    /// </summary>
    public static String purgingStorage() {

        return ResourceManager.getString("PurgingStorage", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Enumeration of result set completed, completing associated transaction scope..
    /// </summary>
    public static String queryCompleted() {

        return ResourceManager.getString("QueryCompleted", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Exception is recoverable, completing scope..
    /// </summary>
    public static String recoverableExceptionCompletesScope() {

        return ResourceManager.getString("RecoverableExceptionCompletesScope", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Shutting down persistence..
    /// </summary>
    public static String shuttingDownPersistence() {

        return ResourceManager.getString("ShuttingDownPersistence", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Storage threw exception of type &apos;{0}&apos;, wrapping and re-throwing..
    /// </summary>
    public static String storageThrewException() {

        return ResourceManager.getString("StorageThrewException", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized string similar to Participating in connection with ambient transaction scope of .
    /// </summary>
    public static String usingScope() {
        return ResourceManager.getString("UsingScope", resourceCulture);
    }
}


/*
 ﻿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ConnectionNotFound" xml:space="preserve">
    <value>Could not find connection name '{0}' in the configuration file.</value>
  </data>
  <data name="MissingConnectionString" xml:space="preserve">
    <value>Could not find the required attribute 'connection string' on the connection name '{0}' in the configuration file.</value>
  </data>
  <data name="MissingProviderName" xml:space="preserve">
    <value>Could not find the required attribute 'providerName' on the connection name '{0}' in the configuration file.</value>
  </data>
  <data name="BadConnectionName" xml:space="preserve">
    <value>A connection could not be created for the specified named connection.</value>
  </data>
  <data name="ConfiguringConnections" xml:space="preserve">
    <value>Configuring connections: master '{0}'; replica '{1}', shards: {2}.</value>
  </data>
  <data name="OpeningMasterConnection" xml:space="preserve">
    <value>Opening master connection '{0}'</value>
  </data>
  <data name="OpeningReplicaConnection" xml:space="preserve">
    <value>Opening replica connection '{0}'.</value>
  </data>
  <data name="OpeningConnection" xml:space="preserve">
    <value>Opening connection '{0}'.</value>
  </data>
  <data name="OpenFailed" xml:space="preserve">
    <value>Unable to open connection '{0}'.</value>
  </data>
  <data name="DiscoveredConnectionProvider" xml:space="preserve">
    <value>Discovered DB provider factory settings for '{0}', using '{1}'.</value>
  </data>
  <data name="DiscoveringConnectionSettings" xml:space="preserve">
    <value>Discovering connection settings for '{0}'.</value>
  </data>
  <data name="EmbeddingShardKey" xml:space="preserve">
    <value>Embedding sharding key into connection string for '{0}'.</value>
  </data>
  <data name="StorageThrewException" xml:space="preserve">
    <value>Storage threw exception of type '{0}', wrapping and re-throwing.</value>
  </data>
  <data name="QueryCompleted" xml:space="preserve">
    <value>Enumeration of result set completed, completing associated transaction scope.</value>
  </data>
  <data name="UsingScope" xml:space="preserve">
    <value>Participating in connection with ambient transaction scope of </value>
  </data>
  <data name="ExecutingCommand" xml:space="preserve">
    <value>Executing command.</value>
  </data>
  <data name="CommandExecuted" xml:space="preserve">
    <value>Command executed, {0} rows affected.</value>
  </data>
  <data name="ExecutingQuery" xml:space="preserve">
    <value>Executing query.</value>
  </data>
  <data name="DeserializingCommit" xml:space="preserve">
    <value>Deserializing commit from record using serializer of type '{0}'.</value>
  </data>
  <data name="CommitPersisted" xml:space="preserve">
    <value>Commit '{0}' persisted successfully.</value>
  </data>
  <data name="AttemptingToCommit" xml:space="preserve">
    <value>Attempting to commit {0} events on stream '{1}' at sequence {2}.</value>
  </data>
  <data name="MarkingCommitAsDispatched" xml:space="preserve">
    <value>Marking commit '{0}' as dispatched.</value>
  </data>
  <data name="GettingStreamsToSnapshot" xml:space="preserve">
    <value>Getting a list of streams to snapshot.</value>
  </data>
  <data name="GettingRevision" xml:space="preserve">
    <value>Getting snapshot for stream '{0}' on or before revision {1}.</value>
  </data>
  <data name="AddingSnapshot" xml:space="preserve">
    <value>Adding snapshot to stream '{0}' at position {1}.</value>
  </data>
  <data name="GettingUndispatchedCommits" xml:space="preserve">
    <value>Getting the list of all undispatched commits.</value>
  </data>
  <data name="GettingAllCommitsFrom" xml:space="preserve">
    <value>Getting all commits from '{0}' forward.</value>
  </data>
  <data name="GettingAllCommitsBetween" xml:space="preserve">
    <value>Getting all commits for stream '{0}' between revisions '{1}' and '{2}'.</value>
  </data>
  <data name="InitializingStorage" xml:space="preserve">
    <value>Initializing storage engine.</value>
  </data>
  <data name="PurgingStorage" xml:space="preserve">
    <value>Purging all stored data.</value>
  </data>
  <data name="DeserializingSnapshot" xml:space="preserve">
    <value>Deserializing snapshot from data record.</value>
  </data>
  <data name="ExceptionSuppressed" xml:space="preserve">
    <value>Executed statement threw an exception, but the exception was suppressed.</value>
  </data>
  <data name="AddingParameter" xml:space="preserve">
    <value>Adding parameter named '{0}' to statement.</value>
  </data>
  <data name="DisposingStatement" xml:space="preserve">
    <value>Disposing SQL statement resources, including any transactions and connections.</value>
  </data>
  <data name="DuplicateCommit" xml:space="preserve">
    <value>Duplicate commit detected; throwing.</value>
  </data>
  <data name="CommandThrewException" xml:space="preserve">
    <value>Non-query statement threw an exception of type '{0}'.</value>
  </data>
  <data name="MaxPageSize" xml:space="preserve">
    <value>Executing query with max page size of {0}.</value>
  </data>
  <data name="CreatingCommand" xml:space="preserve">
    <value>Creating command.</value>
  </data>
  <data name="ClientControlledTransaction" xml:space="preserve">
    <value>Command has client-controlled transaction: {0}.</value>
  </data>
  <data name="CommandTextToExecute" xml:space="preserve">
    <value>Command text to be executed: {0}</value>
  </data>
  <data name="BindingParameter" xml:space="preserve">
    <value>Binding parameter '{0}' with value: {1}</value>
  </data>
  <data name="EnumeratedRowCount" xml:space="preserve">
    <value>Enumerated {0} rows, re-querying for next page.</value>
  </data>
  <data name="EnumerationThrewException" xml:space="preserve">
    <value>Enumeration of paged results threw exception of type '{0}'.</value>
  </data>
  <data name="ShuttingDownPersistence" xml:space="preserve">
    <value>Shutting down persistence.</value>
  </data>
  <data name="RecoverableExceptionCompletesScope" xml:space="preserve">
    <value>Exception is recoverable, completing scope.</value>
  </data>
  <data name="ObjectAlreadyDisposed" xml:space="preserve">
    <value>The object has been disposed and cannot be used.</value>
  </data>
  <data name="AlreadyDisposed" xml:space="preserve">
    <value>Attempt to use storage after it has been disposed.</value>
  </data>
  <data name="OpeningThreadScope" xml:space="preserve">
    <value>Opening new threaded scope for key '{0}'; scope is root: {1}</value>
  </data>
  <data name="DisposingThreadScope" xml:space="preserve">
    <value>Disposing threaded scope; scope is root: {0}</value>
  </data>
  <data name="CleaningRootThreadScope" xml:space="preserve">
    <value>Cleaning up root threaded scope</value>
  </data>
  <data name="DisposingRootThreadScopeResources" xml:space="preserve">
    <value>Disposing underlying thread-scoped resource.</value>
  </data>
  <data name="BadFactoryResult" xml:space="preserve">
    <value>The factory provided was unable to create an object to store.</value>
  </data>
  <data name="NotConnectionsAvailable" xml:space="preserve">
    <value>No connections have been opened yet.</value>
  </data>
  <data name="ConcurrentWriteDetected" xml:space="preserve">
    <value>Concurrent write detected.</value>
  </data>
</root>
 */