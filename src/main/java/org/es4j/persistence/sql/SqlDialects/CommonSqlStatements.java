package org.es4j.persistence.sql.SqlDialects;

//------------------------------------------------------------------------------
import org.es4j.util.CultureInfo;
import org.es4j.util.ResourceManager;

// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
//namespace EventStore.Persistence.SqlPersistence.SqlDialects 
//using System;
/// <summary>
///   A strongly-typed resource class, for looking up localized strings, etc.
/// </summary>
// This class was auto-generated by the StronglyTypedResourceBuilder
// class via a tool like ResGen or Visual Studio.
// To add or remove a member, edit your .ResX file then rerun ResGen
// with the /str option, or rebuild your VS project.
//[global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
//[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
//[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
class CommonSqlStatements {

    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;

    //[global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
    protected CommonSqlStatements() {
        resourceMan = null;
        resourceCulture = null;
    }

    /// <summary>
    ///   Returns the cached ResourceManager instance used by this class.
    /// </summary>
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    public static ResourceManager getResourceManager() {
        if (resourceMan == null) {
            if (true) {
                throw new UnsupportedOperationException("Not yet implemented");
            }
            ResourceManager temp = null; // new ResourceManager("EventStore.Persistence.SqlPersistence.SqlDialects.CommonSqlStatements", typeof(CommonSqlStatements).Assembly);
            resourceMan = temp;
        }
        return resourceMan;
    }

    /// <summary>
    ///   Overrides the current thread's CurrentUICulture property for all
    ///   resource lookups using this strongly typed resource class.
    /// </summary>
    //[global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    public static CultureInfo getCulture() {
        return resourceCulture;
    }

    public void setCulture(CultureInfo resourceCulture_) {
        resourceCulture = resourceCulture;
    }

    /// <summary>
    ///   Looks up a localized String similar to INSERT
    ///  INTO Snapshots
    ///     ( StreamId, StreamRevision, Payload )
    ///SELECT @StreamId, @StreamRevision, @Payload
    ////*FROM DUAL*/
    /// WHERE EXISTS
    ///     ( SELECT *
    ///         FROM Commits
    ///        WHERE StreamId = @StreamId
    ///          AND (StreamRevision - Items) &lt;= @StreamRevision )
    ///   AND NOT EXISTS
    ///     ( SELECT *
    ///         FROM Snapshots
    ///        WHERE StreamId = @StreamId
    ///          AND StreamRevision = @StreamRevision );.
    /// </summary>
    public static String appendSnapshotToCommit() {
        return ResourceManager.getString("AppendSnapshotToCommit", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT COUNT(*)
    ///  FROM Commits
    /// WHERE StreamId = @StreamId
    ///   AND CommitSequence = @CommitSequence
    ///   AND CommitId = @CommitId;.
    /// </summary>
    public static String duplicateCommit() {
        return ResourceManager.getString("DuplicateCommit", resourceCulture);
    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
    ///  FROM Commits
    /// WHERE CommitStamp &gt;= @CommitStamp
    /// ORDER BY CommitStamp, StreamId, StreamRevision
    /// LIMIT @Limit OFFSET @Skip;.
    /// </summary>
    public static String getCommitsFromInstant() {

        return ResourceManager.getString("GetCommitsFromInstant", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
    ///  FROM Commits
    /// WHERE StreamId = @StreamId
    ///   AND StreamRevision &gt;= @StreamRevision
    ///   AND (StreamRevision - Items) &lt;= @MaxStreamRevision
    ///   AND CommitSequence &gt; @CommitSequence
    /// ORDER BY CommitSequence
    /// LIMIT @Limit;.
    /// </summary>
    public static String getCommitsFromStartingRevision() {

        return ResourceManager.getString("GetCommitsFromStartingRevision", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT *
    ///  FROM Snapshots
    /// WHERE StreamId = @StreamId
    ///   AND StreamRevision &lt;= @StreamRevision
    /// ORDER BY StreamRevision DESC
    /// LIMIT 1;.
    /// </summary>
    public static String getSnapshot() {

        return ResourceManager.getString("GetSnapshot", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT C.StreamId, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
    ///  FROM Commits AS C
    /// LEFT OUTER JOIN Snapshots AS S
    ///    ON C.StreamId = S.StreamId
    ///   AND C.StreamRevision &gt;= S.StreamRevision
    /// WHERE C.StreamId &gt; @StreamId
    /// GROUP BY C.StreamId
    ///HAVING MAX(C.StreamRevision) &gt;= MAX(COALESCE(S.StreamRevision, 0)) + @Threshold
    /// ORDER BY C.StreamId
    /// LIMIT @Limit;.
    /// </summary>
    public static String getStreamsRequiringSnapshots() {

        return ResourceManager.getString("GetStreamsRequiringSnapshots", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
    ///  FROM Commits
    /// WHERE Dispatched = 0
    /// ORDER BY CommitStamp
    /// LIMIT @Limit OFFSET @Skip;.
    /// </summary>
    public static String getUndispatchedCommits() {

        return ResourceManager.getString("GetUndispatchedCommits", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to UPDATE Commits
    ///   SET Dispatched = 1
    /// WHERE StreamId = @StreamId
    ///   AND CommitSequence = @CommitSequence;.
    /// </summary>
    public static String markCommitAsDispatched() {

        return ResourceManager.getString("MarkCommitAsDispatched", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to INSERT
    ///  INTO Commits
    ///     ( StreamId, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
    ///VALUES (@StreamId, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload);.
    /// </summary>
    public static String persistCommit() {

        return ResourceManager.getString("PersistCommit", resourceCulture);

    }

    /// <summary>
    ///   Looks up a localized String similar to DELETE FROM Snapshots;
    ///DELETE FROM Commits;.
    /// </summary>
    public static String purgeStorage() {

        return ResourceManager.getString("PurgeStorage", resourceCulture);

    }
}



/*
 ï»¿<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long String</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded String representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:String" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:String" />
              <xsd:attribute name="type" type="xsd:String" />
              <xsd:attribute name="mimetype" type="xsd:String" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:String" />
              <xsd:attribute name="name" type="xsd:String" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:String" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:String" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:String" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:String" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:String" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:String" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:String" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AppendSnapshotToCommit" xml:space="preserve">
    <value>INSERT
  INTO Snapshots
     ( StreamId, StreamRevision, Payload )
SELECT @StreamId, @StreamRevision, @Payload
/*FROM DUAL* /
 WHERE EXISTS
     ( SELECT *
         FROM Commits
        WHERE StreamId = @StreamId
          AND (StreamRevision - Items) &lt;= @StreamRevision )
   AND NOT EXISTS
     ( SELECT *
         FROM Snapshots
        WHERE StreamId = @StreamId
          AND StreamRevision = @StreamRevision );</value>
  </data>
  <data name="DuplicateCommit" xml:space="preserve">
    <value>SELECT COUNT(*)
  FROM Commits
 WHERE StreamId = @StreamId
   AND CommitSequence = @CommitSequence
   AND CommitId = @CommitId;</value>
  </data>
  <data name="GetCommitsFromInstant" xml:space="preserve">
    <value>SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
  FROM Commits
 WHERE CommitStamp &gt;= @CommitStamp
 ORDER BY CommitStamp, StreamId, StreamRevision
 LIMIT @Limit OFFSET @Skip;</value>
  </data>
  <data name="GetCommitsFromStartingRevision" xml:space="preserve">
    <value>SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
  FROM Commits
 WHERE StreamId = @StreamId
   AND StreamRevision &gt;= @StreamRevision
   AND (StreamRevision - Items) &lt;= @MaxStreamRevision
   AND CommitSequence &gt; @CommitSequence
 ORDER BY CommitSequence
 LIMIT @Limit;</value>
  </data>
  <data name="GetSnapshot" xml:space="preserve">
    <value>SELECT *
  FROM Snapshots
 WHERE StreamId = @StreamId
   AND StreamRevision &lt;= @StreamRevision
 ORDER BY StreamRevision DESC
 LIMIT 1;</value>
  </data>
  <data name="GetStreamsRequiringSnapshots" xml:space="preserve">
    <value>SELECT C.StreamId, MAX(C.StreamRevision) AS StreamRevision, MAX(COALESCE(S.StreamRevision, 0)) AS SnapshotRevision
  FROM Commits AS C
 LEFT OUTER JOIN Snapshots AS S
    ON C.StreamId = S.StreamId
   AND C.StreamRevision &gt;= S.StreamRevision
 WHERE C.StreamId &gt; @StreamId
 GROUP BY C.StreamId
HAVING MAX(C.StreamRevision) &gt;= MAX(COALESCE(S.StreamRevision, 0)) + @Threshold
 ORDER BY C.StreamId
 LIMIT @Limit;</value>
  </data>
  <data name="GetUndispatchedCommits" xml:space="preserve">
    <value>SELECT StreamId, StreamRevision, CommitId, CommitSequence, CommitStamp, Headers, Payload
  FROM Commits
 WHERE Dispatched = 0
 ORDER BY CommitStamp
 LIMIT @Limit OFFSET @Skip;</value>
  </data>
  <data name="MarkCommitAsDispatched" xml:space="preserve">
    <value>UPDATE Commits
   SET Dispatched = 1
 WHERE StreamId = @StreamId
   AND CommitSequence = @CommitSequence;</value>
  </data>
  <data name="PersistCommit" xml:space="preserve">
    <value>INSERT
  INTO Commits
     ( StreamId, CommitId, CommitSequence, StreamRevision, Items, CommitStamp, Headers, Payload )
VALUES (@StreamId, @CommitId, @CommitSequence, @StreamRevision, @Items, @CommitStamp, @Headers, @Payload);</value>
  </data>
  <data name="PurgeStorage" xml:space="preserve">
    <value>DELETE FROM Snapshots;
DELETE FROM Commits;</value>
  </data>
</root>
 */